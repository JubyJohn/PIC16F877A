
--------------------****one digit 7 segment***-----------
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)


#include <xc.h>
#define _XTAL_FREQ 16000000

void main(void) {
  PORTB = 0x00;
  TRISB = 0x00;
  while(1)
     {
       PORTB = 0x3f;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);
       
       PORTB = 0x06;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);
       
       PORTB = 0x5b;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);
       
       PORTB = 0x4f;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

       PORTB = 0x66;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

       PORTB = 0x6d;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

       PORTB = 0x7d;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

       PORTB = 0x07;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

       PORTB = 0x7f;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

       PORTB = 0x6f;
       __delay_ms(100);
       PORTB = 0x00;
       __delay_ms(100);

     }
  return;
}

--------------------****one digit 7 segment using array ***---------------
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)


#include <xc.h>
#define _XTAL_FREQ 16000000

void main(void) 
{
    
    int i=0;
    unsigned char a[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    //* unsigned char uses -> 1 byte (8 bits).
* int typically uses 2 or 4 bytes depending on the system (often 16-bit or 32-bit).
* You're storing values like 0x3f, 0x06, etc., which all fit in 8 bits.
* Using int would waste memory unnecessarily.

| Data Type               | Min Value      | Max Value      |
| ----------------------- | -------------- | -------------- |
| `signed char`           | -128           | +127           |
| `unsigned char`         | 0              | 255            |
| `signed int` (16-bit)   | -32,768        | +32,767        |
| `unsigned int` (16-bit) | 0              | 65,535         |
| `signed int` (32-bit)   | -2,147,483,648 | +2,147,483,647 |
| `unsigned int` (32-bit) | 0              | 4,294,967,295  |


âœ… Conclusion: unsigned char is more memory-efficient for 8-bit data.
    
    TRISC = 0x00;
    while(1)
    {
        for(i=0;i<10;i++)
            {   
                    PORTC = a[i];
                    __delay_ms(240);

            }
    }
    
    return;
}
--------------------****double 7 segment***-------------------
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)


#include <xc.h>
#define _XTAL_FREQ 16000000

void main(void) {
    
    int i,j;
    unsigned char a[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    
    PORTC = 0;
    TRISC = 0x00;
    PORTD = 0;
    TRISD = 0x00;
    
    while(1)
    {
        for (i = 0; i < 10; i++)
            {
               for(j=0;j<10;j++)
                    {
                          PORTD = 0X02;
                          PORTC = a[i];
                          __delay_ms(40);

                          PORTD = 0X01;
                          PORTC = a[j];
                          __delay_ms(40);

                    }
            }
    }
    
    return;
}
