-------******TIMER0*********------------
Delay Calculations for 1ms @16Mhz with Prescalar as 32:
RegValue = 256-(Delay * Fosc)/(Prescalar*4)) = 256-((1ms * 16Mhz)/(32*4)) = 256-125=131


// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#define _XTAL_FREQ 16000000


char value = 0;

void __interrupt() ISR(void)
{  
    if(TMR0IF==1)
    {
        value=~value;   // complement the value for blinking the LEDs
        TMR0 = 132;     /*Load the timer Value, (Note: Timervalue is 101 instaed of 100 as the
                          TImer0 needs two instruction Cycles to start incrementing TMR0 */
        TMR0IF=0;       // Clear timer interrupt flag
    } 
}


void main(void) 
{    
    TRISD=0x00;    //COnfigure PORTD as output to blink the LEDs

    OPTION_REG = (1<<2);  // Timer0 with external freq and 32 as prescalar :: PR2 = 1:32 =>100
    TMR0=131;       // Load the time value for 1ms delay REGVALUE=131
    TMR0IE=1;       //Enable timer interrupt bit in PIE1 register
    GIE=1;          //Enable Global Interrupt
    PEIE=1;         //Enable the Peripheral Interrupt

    while(1)
    {
        PORTD = value;
    }

    return;
}



--------*********TIMEER1 - capture mode =input****-----------
refer from: https://deepbluembedded.com/ccp-modules-capture-compare-pwm/


// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#define _XTAL_FREQ 16000000

void main(void) 
{
  //--[ Configure The IO Ports ]--
  // Set The Output Port For The Capture Operation (CCPR1 register)
  TRISB = 0x00;
  PORTB = 0x00; // Initial State
  TRISC = 0xff;
  // Set The Output Port For The TMR1 Module (TMR1 register)
  TRISD = 0x00;
  PORTD = 0x00; // Initial State
  //--[ Configure The Timer1 Module To Operate In Counter Mode ]--
  TMR1 = 0;
  T1CKPS0 = 0;
  T1CKPS1 = 0;
  TMR1CS = 1;
  T1OSCEN = 1;
  T1SYNC = 0;
  TMR1ON = 1;
  //--[ Configure The CCP1 Module To Operate in Capture Mode ]--
  CCP1M0 = 1;
  CCP1M1 = 0;
  CCP1M2 = 1;
  CCP1M3 = 0;
  // Enable CCP1 Interrupt
  CCP1IE = 1;
  PEIE = 1;
  GIE = 1;
  // Create The Main Loop Of The System
  while (1)
  {
    // Read & Print Out The TMR1 Counts
//    PORTD = TMR1;
  }
  return;
}
 
// Write The ISR Handler
void __interrupt() ISR(void)
{
  if (CCP1IF)
  {
    // If Capture Event Occurs, Write the CCPR1 register's value to PORTB
    PORTB = 0xff;
    CCP1IF = 0;
  }
}


--------*********TIMEER1 - compare mode =output****-----------
refer from: https://deepbluembedded.com/ccp-modules-capture-compare-pwm/


// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)


#include <xc.h>
#define _XTAL_FREQ 16000000
#include <stdint.h>
uint8_t X=0; // Counter For Compare Match Events
 
void main(void) 
{
  //--[ Configure The IO Ports ]--
  // Set The Output Pin For The LED
  TRISC4=0;
  RC4=0; // Initially OFF
 
  //--[ Configure The Timer1 Module To Operate In Timer Mode ]--
  TMR1 = 0;
  T1CKPS0 = 0;
  T1CKPS1 = 0;
  TMR1CS = 0;
  TMR1ON = 1;
 
  //--[ Configure The CCP1 Module To Operate in Compare Mode ]--
  // Preload The CCPR1 Register
  CCPR1 = 10000;
  // CCP in Compare Mode, CCPx Pin Is Unchanged & Trigger Special Event
  CCP1M0 = 1;
  CCP1M1 = 1;
  CCP1M2 = 0;
  CCP1M3 = 1;
 
  // Enable CCP1 Interrupt
  CCP1IE = 1;
  PEIE = 1;
  GIE = 1;
 
  // Create The Main Loop Of The System
  while (1)
  {
    // Stay Idle, everything is taken care of in the ISR
  }
  return;
}
 
// Write The ISR Handler
void __interrupt() ISR(void)
{
  if ( CCP1IF )
  {
    X++;
    if (X==100)
    {
      // Toggle The LED
      RC4 = ~RC4;
      X = 0;
    }
    // Clear The Interrupt Flag Bit
    CCP1IF = 0;
  }
}
